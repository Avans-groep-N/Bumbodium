@using Microsoft.AspNetCore.Components
@using Bumbodium.WebApp.Models
@using Bumbodium.Data.DBModels
@using Bumbodium.Data.Interfaces
@using Bumbodium.Data
@using Bumbodium.WebApp.Controllers;
@inject DialogService DialogService
@inject AvailabilityRepo _db
@inject BumbodiumContext _ctx

<EditForm Model="@availabilityViewModel" OnValidSubmit="@SubmitAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <p>
        Datum:
        <label>
            <InputDate @bind-Value="availabilityViewModel.Date" />
        </label>
    </p>
    <p>
        begin tijd:
        <label>
            <InputDate Type="InputDateType.Time" @bind-Value="availabilityViewModel.StartTime" />
        </label>
    </p>
    <p>
        eind tijd:
        <label>
            <InputDate Type="InputDateType.Time" @bind-Value="availabilityViewModel.EndTime" />
        </label>
    </p>
    <p>
        Type beschikbaarheid:
        <label>
            <InputSelect @bind-Value="availabilityViewModel.AvailabilityType">
                <option value="Schoolhours">School uren</option>
                <option value="Leave">Verlof</option>
                <option value="Holidays">Vakantie</option>
            </InputSelect>
        </label>
    </p>

    <button type="submit">Submit</button>
</EditForm>

<RadzenDialog />
<RadzenScheduler @ref=@scheduler Data="@Data" TItem="Availability"
                 StartProperty="StartDateTime" EndProperty="EndDateTime" TextProperty="Text"
                 LoadData=@OnLoadData
                 style="height: 1010px;" TodayText="Vandaag"
                 SlotRender=@OnSlotRender AppointmentRender=@OnAppointmentRender>
    <Template Context="data">
        <p>
            @data.Text
            <RadzenButton Click=@(args => DeleteItem(data)) ButtonStyle="ButtonStyle.Light" Size="ButtonSize.ExtraSmall" Icon="delete" />
        </p>
    </Template>
    <ChildContent>
        <RadzenWeekView TimeFormat="HH:mm" StartTime="@TimeSpan.FromHours(5)" />
        <!--TODO: create a timespan of the exact month-->
        <RadzenMonthView Text="Maand" />
    </ChildContent>
</RadzenScheduler>


@code {
    RadzenScheduler<Availability> scheduler;
    public IEnumerable<Availability> Data { get; set; }
    AvailabilityViewModel availabilityViewModel = new AvailabilityViewModel() { StartTime= TimeOnly.FromDateTime(DateTime.Now), Date = DateOnly.FromDateTime(DateTime.Now.AddDays(14)) };

    DateTime? SelectedStartTime;
    DateTime? SelectedEndTime;
    public AvailabilityType SelectedType { get; set; }

    async Task DeleteItem(Availability item)
    {
        _db.DeleteAvailability(item);
        await scheduler.Reload();
    }

    async Task OnLoadData(SchedulerLoadDataEventArgs args)
    {
        //GET the appointments for between the Start and End
        Data = _db.GetAvailabilitiesInRange(args.Start, args.End);
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Availability> args)
    {
        // Changes the color of the appointments depending on their type
        switch (args.Data.Type)
        {
            case AvailabilityType.Schoolhours:
                args.Attributes["style"] = "background: red";
                break;
            case AvailabilityType.Leave:
                args.Attributes["style"] = "background: blue";
                break;
            case AvailabilityType.Holidays:
                args.Attributes["style"] = "background: green";
                break;
        }
    }
    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlights the selected time slot
        if (args.Start == SelectedStartTime.GetValueOrDefault())
        {
            args.Attributes["class"] = "rz-background-color-info-light";
        }
    }

    async Task SubmitAsync()
    {
        Availability availability = new Availability
            {
                //TODO: actual employee ID
                EmployeeId = "b74ddd14-6340-4840-95c2-db12554843e5",
                StartDateTime = availabilityViewModel.Date.ToDateTime(availabilityViewModel.StartTime),
                EndDateTime = availabilityViewModel.Date.ToDateTime(availabilityViewModel.EndTime),
                Type = availabilityViewModel.AvailabilityType
            };
        _db.InsertAvailability(availability);
        await scheduler.Reload();

    }
}