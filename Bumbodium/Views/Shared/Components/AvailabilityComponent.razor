@using Microsoft.AspNetCore.Components
@inject DialogService DialogService

<!-- TODO add on click events-->
<RadzenButton ButtonStyle="ButtonStyle.Success" Icon="Done">Veranderingen opslaan</RadzenButton>
<RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="Delete">Veranderingen wissen</RadzenButton>
<RadzenDialog />
<br />
<br />
<RadzenSelectBar @bind-Value=@SelectedType TValue="Bumbodium.Data.BeschikbaarheidType">
    <Items>
        <RadzenSelectBarItem Text="School uren" Value="Bumbodium.Data.BeschikbaarheidType.Schoolhours" Style="color: red;" />
        <RadzenSelectBarItem Text="Verlof" Value="Bumbodium.Data.BeschikbaarheidType.Leave" Style="color: blue;" />
    </Items>
</RadzenSelectBar>
<RadzenScheduler @ref=@scheduler Data="@Data" TItem="DataItem"
                 StartProperty="Start" EndProperty="End" TextProperty="Text"
                 style="height: 1100px;"
                 SlotRender=@OnSlotRender SlotSelect=@OnSlotSelect AppointmentRender=@OnAppointmentRender>
    <Template Context="data">
        <p>
            @data.Text
            <RadzenButton Click=@(args => EditItem(data)) ButtonStyle="ButtonStyle.Light" Size="ButtonSize.ExtraSmall" Icon="edit" />
            <RadzenButton Click=@(args => DeleteItem(data)) ButtonStyle="ButtonStyle.Light" Size="ButtonSize.ExtraSmall" Icon="delete" />
        </p>
    </Template>
    <ChildContent>
        <RadzenWeekView TimeFormat="hh:mm" StartTime="@TimeSpan.FromHours(5)" />
    </ChildContent>
</RadzenScheduler>

@code {
    RadzenScheduler<DataItem> scheduler;
    [Parameter]
    public Bumbodium.Data.Availability[] Availabilities { get; set; }
    public List<DataItem> Data { get; set; } = new();

    DateTime? SelectedStartTime;
    DateTime? SelectedEndTime;
    public Bumbodium.Data.BeschikbaarheidType SelectedType { get; set; }

    public class DataItem
    {
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public Bumbodium.Data.BeschikbaarheidType Type { get; set; }
        public string Text
        {
            get
            {
                return Start.ToShortTimeString() + "-" + End.ToShortTimeString();
            }
        }
    }

    protected override void OnInitialized()
    {
        // Adds availability items from the controller to the scheduler list
        foreach (Bumbodium.Data.Availability avail in Availabilities)
        {
            Data.Add(new DataItem()
                {
                    Start = avail.StartDateTime,
                    End = avail.EndDateTime,
                    Type = avail.Type
                });
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        //TODO single abscence per time constraint, somehow
        if (SelectedStartTime == null && SelectedEndTime == null)
        {
            SelectedStartTime = args.Start;
            SelectedEndTime = args.End;
        }
        else
        {
            if (SelectedStartTime < args.End)
            {
                Data.Add(new DataItem()
                    {
                        Start = SelectedStartTime.GetValueOrDefault(),
                        End = args.End,
                        Type = SelectedType
                    });
            }
            else
            {
                Data.Add(new DataItem()
                    {
                        Start = args.Start,
                        End = SelectedEndTime.GetValueOrDefault(),
                        Type = SelectedType
                    });
            }
            SelectedStartTime = null;
            SelectedEndTime = null;
            await scheduler.Reload();
        }
    }

    async Task EditItem(DataItem item)
    {
        await DialogService.OpenAsync<EditAvailabilityPage>("Aanpassen",
            new Dictionary<string, object>() { { "DataItem", item } },
            new DialogOptions() { Width = "400px", Height = "300px" });
        await scheduler.Reload();
    }
    async Task DeleteItem(DataItem item)
    {
        Data.Remove(item);
        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<DataItem> args)
    {
        // Changes the color of the appointments depending on their type
        if (args.Data.Type == Bumbodium.Data.BeschikbaarheidType.Schoolhours)
        {
            args.Attributes["style"] = "background: red";
        }
        if (args.Data.Type == Bumbodium.Data.BeschikbaarheidType.Leave)
        {
            args.Attributes["style"] = "background: blue";
        }
    }
    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Hightlights the selected time slot
        if (args.Start == SelectedStartTime.GetValueOrDefault())
        {
            args.Attributes["class"] = "rz-background-color-info-light";
        }
    }
}