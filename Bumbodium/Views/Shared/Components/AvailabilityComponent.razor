@using Microsoft.AspNetCore.Components
@using Bumbodium.Data.DBModels
@using Bumbodium.Data.Interfaces
@inject DialogService DialogService
@inject IAvailabilityRepo _db

<RadzenDialog />

<RadzenSelectBar @bind-Value=@SelectedType TValue="AvailabilityType">
    <Items>
        <RadzenSelectBarItem Text="School uren" Value="AvailabilityType.Schoolhours" Style="color: red;" />
        <RadzenSelectBarItem Text="Verlof" Value="AvailabilityType.Leave" Style="color: blue;" />
        <RadzenSelectBarItem Text="Vakantie" Value="AvailabilityType.Holidays" Style="color: green;" />
    </Items>
</RadzenSelectBar>
<RadzenScheduler @ref=@scheduler Data="@Data" TItem="Availability"
                 StartProperty="StartDateTime" EndProperty="EndDateTime" TextProperty="Text"
                 LoadData=@OnLoadData
                 style="height: 770px;" TodayText="Vandaag"
                 SlotRender=@OnSlotRender SlotSelect=@OnSlotSelect AppointmentRender=@OnAppointmentRender>
    <Template Context="data">
        <p>
            @if(data.StartDateTime.Date != data.EndDateTime.Date) {
                @(data.StartDateTime.Day + "-" + data.StartDateTime.Month + " tot " + data.EndDateTime.Day + "-"  + data.EndDateTime.Month)
            } else {
                @data.Text
            }
            @if (data.StartDateTime.Date >= DateTime.Today.AddDays(14))
            {
                <RadzenButton Click=@(args => DeleteItem(data)) ButtonStyle="ButtonStyle.Light" Size="ButtonSize.ExtraSmall" Icon="delete" />
            }

        </p>
    </Template>
    <ChildContent>
        <RadzenWeekView TimeFormat="HH:mm" StartTime="@TimeSpan.FromHours(8)" EndTime="@TimeSpan.FromHours(22)"/>
    </ChildContent>
</RadzenScheduler>

@code {
    RadzenScheduler<Availability> scheduler;
    public IEnumerable<Availability> Data { get; set; }

    [Parameter]
    public string UserID { get; set; }

    DateTime? SelectedStartTime;
    DateTime? SelectedEndTime;
    public AvailabilityType SelectedType { get; set; }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        if (SelectedStartTime == null && SelectedEndTime == null)
        {
            SelectedStartTime = args.Start;
            SelectedEndTime = args.End;
        }
        else
        {
            DateTime start;
            DateTime end;
            if (SelectedStartTime < args.End)
            {
                start = SelectedStartTime.GetValueOrDefault();
                end = args.End;
            }
            else
            {
                start = args.Start;
                end = SelectedEndTime.GetValueOrDefault();
            }
            Availability availability = new Availability()
                    {
                        StartDateTime = start,
                        EndDateTime = end,
                        Type = SelectedType,
                        EmployeeId = UserID
                    };
            if (AvailabilityIsValid(availability))
            {
                _db.InsertAvailability(availability);
            }
            SelectedStartTime = null;
            SelectedEndTime = null;
            await scheduler.Reload();
        }
    }
    
    async Task DeleteItem(Availability item)
    {
        _db.DeleteAvailability(item);
        await scheduler.Reload();
    }

    async Task OnLoadData(SchedulerLoadDataEventArgs args)
    {
        //GET the appointments for between the Start and End
        Data = _db.GetAvailabilitiesInRange(args.Start, args.End, UserID);
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Availability> args)
    {
        // Changes the color of the appointments depending on their type
        switch (args.Data.Type)
        {
            case AvailabilityType.Schoolhours:
                args.Attributes["style"] = "background: red";
                break;
            case AvailabilityType.Leave:
                args.Attributes["style"] = "background: blue";
                break;
            case AvailabilityType.Holidays:
                args.Attributes["style"] = "background: green";
                break;
        }
    }
    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlights the selected time slot
        if (args.Start == SelectedStartTime.GetValueOrDefault())
        {
            args.Attributes["class"] = "rz-background-color-info-light";
        }
        if (args.Start.Date < DateTime.Today.AddDays(14))
        {
            args.Attributes["class"] = "rz-background-color-base-400";
            args.Attributes["onclick"] = "";
        }
    }

    private bool AvailabilityIsValid(Availability availability)
    {
        if (availability.EndDateTime < availability.StartDateTime)
        {
            ShowValidationError("Eindtijd moet voor starttijd zijn.");
            return false;
        }
        DateTime minimumDate = DateTime.Today.AddDays(14);
        if(availability.StartDateTime < minimumDate || availability.EndDateTime < minimumDate) {
            ShowValidationError("Je kunt voor deze tijd je beschikbaarheid niet meer opgeven");
            return false;
        }
        if (_db.AvailabilityExistsInTime(availability.StartDateTime, availability.EndDateTime, UserID))
        {
            ShowValidationError("Je hebt hier al een andere onbeschikbaarheid staan.");
            return false;
        }
        return true;
    }

    private void ShowValidationError(string error)
    {
        DialogService.OpenAsync("Beschikbaarheid toevoegen error", ds =>
    @<div>
        @error
    </div>, new DialogOptions() { CloseDialogOnOverlayClick = true });
    }
}