@using Microsoft.AspNetCore.Components
@using Bumbodium.Data.DBModels
@using Bumbodium.Data.Interfaces
@inject DialogService DialogService
@inject IAvailabilityRepo _db

<RadzenDialog />
<RadzenSelectBar @bind-Value=@SelectedType TValue="AvailabilityType">
    <Items>
        <RadzenSelectBarItem Text="School uren" Value="AvailabilityType.Schoolhours" Style="color: red;" />
        <RadzenSelectBarItem Text="Verlof" Value="AvailabilityType.Leave" Style="color: blue;" />
        <RadzenSelectBarItem Text="Vakantie" Value="AvailabilityType.Holidays" Style="color: green;" />
    </Items>
</RadzenSelectBar>
<RadzenScheduler @ref=@scheduler Data="@Data" TItem="Availability"
                 StartProperty="StartDateTime" EndProperty="EndDateTime" TextProperty="Text"
                 LoadData=@OnLoadData
                 style="height: 1010px;" TodayText="Vandaag"
                 SlotRender=@OnSlotRender SlotSelect=@OnSlotSelect AppointmentRender=@OnAppointmentRender>
    <Template Context="data">
        <p>
            @data.Text
            <RadzenButton Click=@(args => EditItem(data)) ButtonStyle="ButtonStyle.Light" Size="ButtonSize.ExtraSmall" Icon="edit" />
            <RadzenButton Click=@(args => DeleteItem(data)) ButtonStyle="ButtonStyle.Light" Size="ButtonSize.ExtraSmall" Icon="delete" />
        </p>
    </Template>
    <ChildContent>
        <RadzenWeekView TimeFormat="HH:mm" StartTime="@TimeSpan.FromHours(5)" />
        <!--TODO: create a timespan of the exact month-->
        <RadzenMonthView Text="Maand" />
    </ChildContent>
</RadzenScheduler>

@code {
    RadzenScheduler<Availability> scheduler;
    public IEnumerable<Availability> Data { get; set; }

    [Parameter]
    public string UserID { get; set; }

    DateTime? SelectedStartTime;
    DateTime? SelectedEndTime;
    public AvailabilityType SelectedType { get; set; }


    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        //TODO single abscence per time constraint, somehow
        if (SelectedStartTime == null && SelectedEndTime == null)
        {
            SelectedStartTime = args.Start;
            SelectedEndTime = args.End;
        }
        else
        {
            if (SelectedStartTime < args.End)
            {
                _db.InsertAvailability(new Availability()
                    {
                        StartDateTime = SelectedStartTime.GetValueOrDefault(),
                        EndDateTime = args.End,
                        Type = SelectedType,
                        EmployeeId = UserID
                    });
            }
            else
            {
                _db.InsertAvailability(new Availability()
                    {
                        StartDateTime = args.Start,
                        EndDateTime = SelectedEndTime.GetValueOrDefault(),
                        Type = SelectedType,
                        EmployeeId = UserID
                    });
            }
            SelectedStartTime = null;
            SelectedEndTime = null;
            await scheduler.Reload();
        }
    }

    async Task EditItem(Availability item)
    {
        await DialogService.OpenAsync<EditAvailabilityPage>("Aanpassen",
            new Dictionary<string, object>() { { "Availability", item } },
            new DialogOptions() { });
        _db.UpdateAvailability(item);
        await scheduler.Reload();
    }
    async Task DeleteItem(Availability item)
    {
        _db.DeleteAvailability(item);
        await scheduler.Reload();
    }

    async Task OnLoadData(SchedulerLoadDataEventArgs args)
    {
        //GET the appointments for between the Start and End
        Data = _db.GetAvailabilitiesInRange(args.Start, args.End, UserID);
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Availability> args)
    {
        // Changes the color of the appointments depending on their type
        switch (args.Data.Type)
        {
            case AvailabilityType.Schoolhours:
                args.Attributes["style"] = "background: red";
                break;
            case AvailabilityType.Leave:
                args.Attributes["style"] = "background: blue";
                break;
            case AvailabilityType.Holidays:
                args.Attributes["style"] = "background: green";
                break;
        }
    }
    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlights the selected time slot
        if (args.Start == SelectedStartTime.GetValueOrDefault())
        {
            args.Attributes["class"] = "rz-background-color-info-light";
        }
    }
}