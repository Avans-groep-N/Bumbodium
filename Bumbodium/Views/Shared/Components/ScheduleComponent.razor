@using Microsoft.AspNetCore.Components
@using Bumbodium.Data.DBModels
@using Bumbodium.Data.Interfaces
@inject DialogService DialogService
@inject IShiftRepo _db

<RadzenDialog />
<RadzenDropDown TValue="DepartmentType" Class="w-100"
                Data=@(Enum.GetValues<DepartmentType>())
                Change=@(args => OnDepartmentChange(args)) />

<RadzenDropDownDataGrid @ref=@dropdown TValue="Employee" LoadData="@LoadEmployeeData" AllowFiltering="true" AllowSorting="false" AllowVirtualization="false"
                        Data=@EmployeeData Count="@EmployeeCount" TextProperty="FullName"
                        Change=@(args => OnEmployeeChange((Employee)args)) Class="w-100">
    <EmptyTemplate>
        <p>Geen werknemers gevonden, selecteer een andere afdeling</p>
    </EmptyTemplate>
    <Columns>
        <RadzenDropDownDataGridColumn Property="FullName" Title="Naam" Width="200px" />
        <RadzenDropDownDataGridColumn Property="EmployeeID" Title="Id" Width="80px" />
    </Columns>
</RadzenDropDownDataGrid>

<RadzenScheduler @ref=@scheduler Data="@ShiftsData" TItem="Shift"
                 StartProperty="ShiftStartDateTime" EndProperty="ShiftEndDateTime" TextProperty="Employee.FullName"
                 LoadData=@OnLoadData
                 style="height: 1010px;" TodayText="Vandaag"
                 SlotRender=@OnSlotRender SlotSelect=@OnSlotSelect AppointmentRender=@OnAppointmentRender>
    <Template Context="data">
        <p>
            @data.Employee.FullName
            <RadzenButton Click=@(args => EditItem(data)) ButtonStyle="ButtonStyle.Light" Size="ButtonSize.ExtraSmall" Icon="edit" />
            <RadzenButton Click=@(args => DeleteItem(data)) ButtonStyle="ButtonStyle.Light" Size="ButtonSize.ExtraSmall" Icon="delete" />
        </p>
    </Template>
    <ChildContent>
        <RadzenWeekView TimeFormat="HH:mm" StartTime="@TimeSpan.FromHours(5)" />
        <!--TODO: create a timespan of the exact month-->
        <RadzenMonthView Text="Maand" />
    </ChildContent>
</RadzenScheduler>

@code {
    RadzenScheduler<Shift> scheduler;
    RadzenDropDownDataGrid<Employee> dropdown = new();
    public IEnumerable<Shift> ShiftsData { get; set; }
    public IEnumerable<Employee> EmployeeData { get; set; }
    public int EmployeeCount { get; set; }

    DateTime? SelectedStartTime;
    DateTime? SelectedEndTime;
    int SelectedEmployeeId;
    DepartmentType SelectedDepartmentId;

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        //TODO single abscence per time constraint, somehow
        if (SelectedStartTime == null && SelectedEndTime == null)
        {
            SelectedStartTime = args.Start;
            SelectedEndTime = args.End;
        }
        else
        {
            if (SelectedStartTime < args.End)
            {
                await _db.InsertShift(new Shift()
                    {
                        ShiftStartDateTime = SelectedStartTime.GetValueOrDefault(),
                        ShiftEndDateTime = args.End,
                        EmployeeId = SelectedEmployeeId,
                        DepartmentId = SelectedDepartmentId
                    });
            }
            else
            {
                await _db.InsertShift(new Shift()
                    {
                        ShiftStartDateTime = args.Start,
                        ShiftEndDateTime = SelectedEndTime.GetValueOrDefault(),
                        EmployeeId = SelectedEmployeeId,
                        DepartmentId = SelectedDepartmentId
                    });
            }
            SelectedStartTime = null;
            SelectedEndTime = null;
            await scheduler.Reload();
        }
    }
    async Task EditItem(Shift item)
    {
        await DialogService.OpenAsync<EditShiftPage>("Aanpassen",
            new Dictionary<string, object>() { { "Shift", item } },
            new DialogOptions() { });
        await _db.UpdateShift(item);
        await scheduler.Reload();
    }
    async Task DeleteItem(Shift item)
    {
        await _db.DeleteShift(item);
        await scheduler.Reload();
    }
    async Task OnLoadData(SchedulerLoadDataEventArgs args)
    {
        //GET the appointments for between the Start and End
        ShiftsData = await _db.GetShiftsInRange(args.Start, args.End);
    }
    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Shift> args)
    {

    }
    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlights the selected time slot
        if (args.Start == SelectedStartTime.GetValueOrDefault())
        {
            args.Attributes["class"] = "rz-background-color-info-light";
        }
    }

    async Task OnDepartmentChange(object value)
    {
        SelectedDepartmentId = (DepartmentType)value;
        SelectedEmployeeId = 0;
        await dropdown.Reload();
        dropdown.Reset();
    }
    void OnEmployeeChange(Employee value)
    {
        SelectedEmployeeId = value.EmployeeID;
    }
    async Task LoadEmployeeData(LoadDataArgs args)
    {
        EmployeeData = await _db.GetEmployeesInRange((int)SelectedDepartmentId, args.Filter, args.Skip.Value, args.Top.Value);
        EmployeeCount = await _db.GetEmployeeCount((int)SelectedDepartmentId, args.Filter);
        await InvokeAsync(StateHasChanged);
    }
}
