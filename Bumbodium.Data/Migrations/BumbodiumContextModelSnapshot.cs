// <auto-generated />
using System;
using Bumbodium.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bumbodium.Data.Migrations
{
    [DbContext(typeof(BumbodiumContext))]
    partial class BumbodiumContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Bumbodium.Data.DBModels.Availability", b =>
                {
                    b.Property<int>("AvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AvailabilityId"), 1L, 1);

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("AvailabilityId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Availability");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Branch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Den Bosch",
                            Country = 0,
                            HouseNumber = "1",
                            PostalCode = "0000 AA",
                            Street = "01"
                        });
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.BranchEmployee", b =>
                {
                    b.Property<int>("FiliaalId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FiliaalId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("BranchEmployee");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<int>("SurfaceAreaInM2")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 1,
                            Description = "Fresh",
                            Name = 0,
                            SurfaceAreaInM2 = 50
                        },
                        new
                        {
                            Id = 2,
                            BranchId = 1,
                            Description = "Shelves",
                            Name = 1,
                            SurfaceAreaInM2 = 140
                        },
                        new
                        {
                            Id = 3,
                            BranchId = 1,
                            Description = "Checkout",
                            Name = 2,
                            SurfaceAreaInM2 = 90
                        });
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.DepartmentEmployee", b =>
                {
                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WorkFunction")
                        .HasColumnType("int");

                    b.HasKey("DepartmentId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("DepartmentEmployee");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "19f7d479-542a-408b-9016-0561e3e70f65",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 2,
                            EmployeeId = "19f7d479-542a-408b-9016-0561e3e70f65",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 3,
                            EmployeeId = "19f7d479-542a-408b-9016-0561e3e70f65",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "2e835447-b339-4a55-9a74-c0d8449bca5c",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 2,
                            EmployeeId = "2e835447-b339-4a55-9a74-c0d8449bca5c",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 3,
                            EmployeeId = "2e835447-b339-4a55-9a74-c0d8449bca5c",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "5782d108-8865-40f8-b3b7-ced82309983f",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 2,
                            EmployeeId = "5782d108-8865-40f8-b3b7-ced82309983f",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 3,
                            EmployeeId = "5782d108-8865-40f8-b3b7-ced82309983f",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "5989a56b-4d00-4213-9b73-34f80701836b",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 2,
                            EmployeeId = "5989a56b-4d00-4213-9b73-34f80701836b",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 3,
                            EmployeeId = "5989a56b-4d00-4213-9b73-34f80701836b",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "5fd33111-a002-4ef1-a301-8c4e4e31e20b",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 2,
                            EmployeeId = "5fd33111-a002-4ef1-a301-8c4e4e31e20b",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 3,
                            EmployeeId = "5fd33111-a002-4ef1-a301-8c4e4e31e20b",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "a20cddd4-9704-439f-94bc-95f4659ce543",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 2,
                            EmployeeId = "44128c29-b648-431e-89f4-7a105f79b00c",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "a357223e-5d1e-461e-b1ad-3a8592f548dd",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "b74ddd14-6340-4840-95c2-db12554843e5",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "b93d704f-a4ae-413f-a587-0b597bbe6a9f",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "bdece4e2-3ed9-4008-8878-65884c142394",
                            WorkFunction = 0
                        });
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Employee", b =>
                {
                    b.Property<string>("EmployeeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateInService")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOutService")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("EmployeeID");

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            EmployeeID = "b74ddd14-6340-4840-95c2-db12554843e5",
                            Birthdate = new DateTime(1989, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2006, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "j.vangeest@bumbodium.nl",
                            FirstName = "Jan",
                            LastName = "Geest",
                            MiddleName = "van",
                            PhoneNumber = "+31 6 56927484",
                            Type = 0
                        },
                        new
                        {
                            EmployeeID = "2e835447-b339-4a55-9a74-c0d8449bca5c",
                            Birthdate = new DateTime(1, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2001, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Johnny@vos.nl",
                            FirstName = "Johnny",
                            LastName = "Vos",
                            PhoneNumber = "+31 777777777",
                            Type = 0
                        },
                        new
                        {
                            EmployeeID = "19f7d479-542a-408b-9016-0561e3e70f65",
                            Birthdate = new DateTime(1, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2001, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Martijs@Martijs.Martijs",
                            FirstName = "Martijs",
                            LastName = "Martijs",
                            PhoneNumber = "Martijs",
                            Type = 0
                        },
                        new
                        {
                            EmployeeID = "44128c29-b648-431e-89f4-7a105f79b00c",
                            Birthdate = new DateTime(1975, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2009, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Heinz@vonschmichtelstein.de",
                            FirstName = "Heinz",
                            LastName = "Schmichtelstein",
                            MiddleName = "von",
                            PhoneNumber = "+49 420 69 7777",
                            Type = 1
                        },
                        new
                        {
                            EmployeeID = "5782d108-8865-40f8-b3b7-ced82309983f",
                            Birthdate = new DateTime(2007, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2009, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Bliksem@martijnshamster.nl",
                            FirstName = "Bliksem",
                            LastName = "Snel",
                            PhoneNumber = "+31 snel",
                            Type = 1
                        },
                        new
                        {
                            EmployeeID = "5989a56b-4d00-4213-9b73-34f80701836b",
                            Birthdate = new DateTime(2005, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2009, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Lobbus@kjell.nl",
                            FirstName = "Lobbus",
                            LastName = "Good boy",
                            PhoneNumber = "+31 1684867685",
                            Type = 1
                        },
                        new
                        {
                            EmployeeID = "5fd33111-a002-4ef1-a301-8c4e4e31e20b",
                            Birthdate = new DateTime(1988, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2020, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Paula@campina.nl",
                            FirstName = "Paula",
                            LastName = "Campina",
                            PhoneNumber = "+31 612345678",
                            Type = 0
                        },
                        new
                        {
                            EmployeeID = "a20cddd4-9704-439f-94bc-95f4659ce543",
                            Birthdate = new DateTime(1957, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2019, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Henkie@Wauwzerz.nl",
                            FirstName = "Henkie",
                            LastName = "T",
                            PhoneNumber = "ten minste vijf",
                            Type = 1
                        },
                        new
                        {
                            EmployeeID = "a357223e-5d1e-461e-b1ad-3a8592f548dd",
                            Birthdate = new DateTime(1999, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2014, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Katriene@smedensberg.com",
                            FirstName = "Katriene",
                            LastName = "Smedensberg",
                            PhoneNumber = "+31 99999999",
                            Type = 0
                        },
                        new
                        {
                            EmployeeID = "b93d704f-a4ae-413f-a587-0b597bbe6a9f",
                            Birthdate = new DateTime(1900, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2002, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Henk@henk.nl",
                            FirstName = "Henk",
                            LastName = "Henk",
                            PhoneNumber = "+31 6666666666",
                            Type = 1
                        },
                        new
                        {
                            EmployeeID = "bdece4e2-3ed9-4008-8878-65884c142394",
                            Birthdate = new DateTime(1869, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2002, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Henk@maardanstoer.nl",
                            FirstName = "Henk",
                            LastName = "Stoer",
                            MiddleName = "maar dan",
                            PhoneNumber = "+31 123123123",
                            Type = 1
                        });
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Forecast", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("AmountExpectedColis")
                        .HasColumnType("int");

                    b.Property<int>("AmountExpectedCustomers")
                        .HasColumnType("int");

                    b.Property<int>("AmountExpectedEmployees")
                        .HasColumnType("int");

                    b.Property<int>("AmountExpectedHours")
                        .HasColumnType("int");

                    b.Property<int?>("StandardsId")
                        .HasColumnType("int");

                    b.HasKey("Date", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("StandardsId");

                    b.ToTable("Forecast");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Presence", b =>
                {
                    b.Property<int>("PresenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PresenceId"), 1L, 1);

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AlteredClockInDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AlteredClockOutDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ClockInDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ClockOutDateTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSick")
                        .HasColumnType("bit");

                    b.HasKey("PresenceId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Presence");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Shift", b =>
                {
                    b.Property<int>("ShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShiftId"), 1L, 1);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ShiftEndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShiftStartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ShiftId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Shift");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Standards", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1048)
                        .HasColumnType("nvarchar(1048)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Standards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = 0,
                            Description = "aantal minuten per Coli uitladen.",
                            Subject = "Coli",
                            Value = 5
                        },
                        new
                        {
                            Id = 2,
                            Country = 0,
                            Description = "aantal minuten Vakken vullen per Coli.",
                            Subject = "StockingShelves",
                            Value = 30
                        },
                        new
                        {
                            Id = 3,
                            Country = 0,
                            Description = "1 Kassière aantal klanten per uur.",
                            Subject = "Cashier",
                            Value = 30
                        },
                        new
                        {
                            Id = 4,
                            Country = 0,
                            Description = "1 medewerker per aantal klanten per uur.",
                            Subject = "Employee",
                            Value = 100
                        },
                        new
                        {
                            Id = 5,
                            Country = 0,
                            Description = "aantal seconde per meter.",
                            Subject = "Mirror",
                            Value = 30
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a836855-8fb0-40da-a658-01dee209715f",
                            Email = "j.vangeest@bumbodium.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "J.VANGEEST@BUMBODIUM.NL",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEGCPFOnOe4EoAXsMXIqMSgGJSWoPpq+vUMHkL+4k3i8t/jvZ1OIGDMPky5gTBuid1w==",
                            PhoneNumber = "+31 6 56927484",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cb00e25d-b22e-438e-9af8-959bebb6c91c",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "19f7d479-542a-408b-9016-0561e3e70f65",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aa24528e-e47f-4e56-b785-f14fe4e707b2",
                            Email = "Martijs@Martijs.Martijs",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "MARTIJS@MARTIJS.MARTIJS",
                            PasswordHash = "AQAAAAEAACcQAAAAEDdC2WdT9wMHkFChRNwmySo9haPdaKQ21AmotdMphe2KBlID4ZYI+6c2xYfgTNfPig==",
                            PhoneNumber = "Martijs",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "915be6e1-89d5-4a64-8065-02ddd4b8ac4a",
                            TwoFactorEnabled = false,
                            UserName = "Martijs@Martijs.Martijs"
                        },
                        new
                        {
                            Id = "2e835447-b339-4a55-9a74-c0d8449bca5c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d59ea940-38b0-465b-a687-b9366e9f9eb8",
                            Email = "Johnny@vos.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "JOHNNY@VOS.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEBmwow7wzVsBhneCRlbjtffz+fSFOJe8wlqm4FovuI0cUQviuKqHv6WtTnyqldRmUQ==",
                            PhoneNumber = "+31 5",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fea60dc3-704a-4dfa-a833-364657748209",
                            TwoFactorEnabled = false,
                            UserName = "Johnny@vos.nl"
                        },
                        new
                        {
                            Id = "44128c29-b648-431e-89f4-7a105f79b00c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "858fe25c-3d8f-436f-8fa1-b68800723688",
                            Email = "Heinz@vonschmichtelstein.de",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "HEINZ@VONSCHMICHTELSTEIN.DE",
                            PasswordHash = "AQAAAAEAACcQAAAAECntc82jKnzm3QPlia4u/k91QiXNVIHR4iHZgQj+30DVmCACLiP+Vz7bIQB128J0Qw==",
                            PhoneNumber = "+49 420 69 7777",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c36712fc-1fa7-4803-9341-3d43d815389d",
                            TwoFactorEnabled = false,
                            UserName = "Heinz@vonschmichtelstein.de"
                        },
                        new
                        {
                            Id = "5782d108-8865-40f8-b3b7-ced82309983f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01fd365f-246b-43d7-a2b8-80e5a2e7f0b0",
                            Email = "Bliksem@martijnshamster.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "BLIKSEM@MARTIJNSHAMSTER.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEDaC0A/jHNMV2a8OcMYjexJDbBxRoTmwhIC2W341153iIViq/oN1TNEDyqSUGH5Ojw==",
                            PhoneNumber = "+31 snel",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "945e553e-3e2d-4971-a1ab-164218982f47",
                            TwoFactorEnabled = false,
                            UserName = "Bliksem@martijnshamster.nl"
                        },
                        new
                        {
                            Id = "5989a56b-4d00-4213-9b73-34f80701836b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "85dd4e09-b1f9-457f-8bd3-e732393bb113",
                            Email = "Lobbus@kjell.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "LOBBUS@KJELL.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEBUWmLNvc4szi7UJqBZqDWwAkYma3NzuEvZ0stwwSCGZZpHpAsCuKZ1obgTsF6wApA==",
                            PhoneNumber = "+31 6 67215943",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e10f0f5a-f58a-4c61-a702-a178cfebbda8",
                            TwoFactorEnabled = false,
                            UserName = "Lobbus@kjell.nl"
                        },
                        new
                        {
                            Id = "5fd33111-a002-4ef1-a301-8c4e4e31e20b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0cea30bb-bd74-42f8-823a-4746b9cc3eec",
                            Email = "Paula@campina.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "PAULA@CAMPINA.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEI+aOeJ3SiUm+fQ0w9nvZpyINATJsGdvk5qK7gk/9C7qTSMV76O0fgHaJDosqZe0OA==",
                            PhoneNumber = "+31 612345678",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d106abd-cd70-4fa0-98e9-c54945276be0",
                            TwoFactorEnabled = false,
                            UserName = "Paula@campina.nl"
                        },
                        new
                        {
                            Id = "a20cddd4-9704-439f-94bc-95f4659ce543",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "011c2580-c503-4a66-86d3-b3b6d2b6d5d7",
                            Email = "Henkie@Wauwzerz.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "HENKIE@WAUWZERZ.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEMsLEvqpLdWdhbyfd3vcdH2A0eHDbeUcYpgtNAS7UdiTtLx23BNSHvbqJ8UY3G0+3Q==",
                            PhoneNumber = "ten minste vijf",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6a80a50e-50b7-47d0-a161-0e8e10cb150b",
                            TwoFactorEnabled = false,
                            UserName = "Henkie@Wauwzerz.nl"
                        },
                        new
                        {
                            Id = "a357223e-5d1e-461e-b1ad-3a8592f548dd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1905be6d-d17b-45a4-b808-3addc0f1685d",
                            Email = "Katriene@smedensberg.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "KATRIENE@SMEDENSBERG.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGooy/aUv26XB/b6WZwnic2m3D0qbcU1pZ7M7HHNk6NMHA/5umvF6GFUMCq16IHClg==",
                            PhoneNumber = "+31 99999999",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "650e3fbd-fce0-482c-a5f0-c489b5023e61",
                            TwoFactorEnabled = false,
                            UserName = "Katriene@smedensberg.com"
                        },
                        new
                        {
                            Id = "b93d704f-a4ae-413f-a587-0b597bbe6a9f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "60e43292-c883-4ecb-9402-610457730752",
                            Email = "Henk@henk.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "HENK@HENK.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAENI7lkZ+l6r5tBmg/8vkfEsondV2yx1M7gaMRAjC1tbq8/No6HxEuNy7N12jyuI0zw==",
                            PhoneNumber = "+31 6666666666",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "82a132f3-bdb7-4ced-a5f0-bbd852b7b29e",
                            TwoFactorEnabled = false,
                            UserName = "Henk@henk.nl"
                        },
                        new
                        {
                            Id = "bdece4e2-3ed9-4008-8878-65884c142394",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f6dadd2-5835-467a-8cff-3e5c36b2c9ff",
                            Email = "Henk@maardanstoer.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "HENK@MAARDANSTOER.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAELUExjbXa9wSJ8hS1feyjSk6Kcmo5bpO2c6NI14sLhdTC4GiUCxs/X8ujKIXsDqPzg==",
                            PhoneNumber = "+31 123123123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "06616283-4221-44ae-b48a-f4414a538a9d",
                            TwoFactorEnabled = false,
                            UserName = "Henk@maardanstoer.nl"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Availability", b =>
                {
                    b.HasOne("Bumbodium.Data.DBModels.Employee", "Employee")
                        .WithMany("Availability")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.BranchEmployee", b =>
                {
                    b.HasOne("Bumbodium.Data.DBModels.Employee", "Employee")
                        .WithMany("PartOFFiliaal")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bumbodium.Data.DBModels.Branch", "Filiaal")
                        .WithMany("PartOFEmployee")
                        .HasForeignKey("FiliaalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Filiaal");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Department", b =>
                {
                    b.HasOne("Bumbodium.Data.DBModels.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.DepartmentEmployee", b =>
                {
                    b.HasOne("Bumbodium.Data.DBModels.Department", "Department")
                        .WithMany("PartOFEmployee")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bumbodium.Data.DBModels.Employee", "Employee")
                        .WithMany("PartOFDepartment")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Employee", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Account")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Forecast", b =>
                {
                    b.HasOne("Bumbodium.Data.DBModels.Department", "Department")
                        .WithMany("Forecast")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bumbodium.Data.DBModels.Standards", null)
                        .WithMany("ForecastId")
                        .HasForeignKey("StandardsId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Presence", b =>
                {
                    b.HasOne("Bumbodium.Data.DBModels.Employee", "Employee")
                        .WithMany("Presence")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Shift", b =>
                {
                    b.HasOne("Bumbodium.Data.DBModels.Department", "Department")
                        .WithMany("Shifts")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bumbodium.Data.DBModels.Employee", "Employee")
                        .WithMany("Shifts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Branch", b =>
                {
                    b.Navigation("PartOFEmployee");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Department", b =>
                {
                    b.Navigation("Forecast");

                    b.Navigation("PartOFEmployee");

                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Employee", b =>
                {
                    b.Navigation("Availability");

                    b.Navigation("PartOFDepartment");

                    b.Navigation("PartOFFiliaal");

                    b.Navigation("Presence");

                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Standards", b =>
                {
                    b.Navigation("ForecastId");
                });
#pragma warning restore 612, 618
        }
    }
}
