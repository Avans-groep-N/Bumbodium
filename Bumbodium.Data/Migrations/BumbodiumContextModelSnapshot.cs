// <auto-generated />
using System;
using Bumbodium.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bumbodium.Data.Migrations
{
    [DbContext(typeof(BumbodiumContext))]
    partial class BumbodiumContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Bumbodium.Data.DBModels.Availability", b =>
                {
                    b.Property<int>("AvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AvailabilityId"), 1L, 1);

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("AvailabilityId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Availability");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Branch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Den Bosch",
                            Country = 0,
                            HouseNumber = "1",
                            PostalCode = "0000 AA",
                            Street = "01"
                        });
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.BranchEmployee", b =>
                {
                    b.Property<int>("FiliaalId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FiliaalId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("BranchEmployee");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<int>("SurfaceAreaInM2")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 1,
                            Description = "Fresh",
                            Name = 0,
                            SurfaceAreaInM2 = 50
                        },
                        new
                        {
                            Id = 2,
                            BranchId = 1,
                            Description = "Shelves",
                            Name = 1,
                            SurfaceAreaInM2 = 140
                        },
                        new
                        {
                            Id = 3,
                            BranchId = 1,
                            Description = "Checkout",
                            Name = 2,
                            SurfaceAreaInM2 = 90
                        });
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.DepartmentEmployee", b =>
                {
                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WorkFunction")
                        .HasColumnType("int");

                    b.HasKey("DepartmentId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("DepartmentEmployee");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "19f7d479-542a-408b-9016-0561e3e70f65",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 2,
                            EmployeeId = "19f7d479-542a-408b-9016-0561e3e70f65",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 3,
                            EmployeeId = "19f7d479-542a-408b-9016-0561e3e70f65",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "2e835447-b339-4a55-9a74-c0d8449bca5c",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 2,
                            EmployeeId = "2e835447-b339-4a55-9a74-c0d8449bca5c",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 3,
                            EmployeeId = "2e835447-b339-4a55-9a74-c0d8449bca5c",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "5782d108-8865-40f8-b3b7-ced82309983f",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 2,
                            EmployeeId = "5782d108-8865-40f8-b3b7-ced82309983f",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 3,
                            EmployeeId = "5782d108-8865-40f8-b3b7-ced82309983f",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "5989a56b-4d00-4213-9b73-34f80701836b",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 2,
                            EmployeeId = "5989a56b-4d00-4213-9b73-34f80701836b",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 3,
                            EmployeeId = "5989a56b-4d00-4213-9b73-34f80701836b",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "5fd33111-a002-4ef1-a301-8c4e4e31e20b",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 2,
                            EmployeeId = "5fd33111-a002-4ef1-a301-8c4e4e31e20b",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 3,
                            EmployeeId = "5fd33111-a002-4ef1-a301-8c4e4e31e20b",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "a20cddd4-9704-439f-94bc-95f4659ce543",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 2,
                            EmployeeId = "44128c29-b648-431e-89f4-7a105f79b00c",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "a357223e-5d1e-461e-b1ad-3a8592f548dd",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "b74ddd14-6340-4840-95c2-db12554843e5",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "b93d704f-a4ae-413f-a587-0b597bbe6a9f",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "bdece4e2-3ed9-4008-8878-65884c142394",
                            WorkFunction = 0
                        });
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Employee", b =>
                {
                    b.Property<string>("EmployeeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateInService")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOutService")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("EmployeeID");

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            EmployeeID = "b74ddd14-6340-4840-95c2-db12554843e5",
                            Birthdate = new DateTime(1989, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2006, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "j.vangeest@bumbodium.nl",
                            FirstName = "Jan",
                            LastName = "Geest",
                            MiddleName = "van",
                            PhoneNumber = "+31 6 56927484",
                            Type = 0
                        },
                        new
                        {
                            EmployeeID = "2e835447-b339-4a55-9a74-c0d8449bca5c",
                            Birthdate = new DateTime(1, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2001, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Johnny@vos.nl",
                            FirstName = "Johnny",
                            LastName = "Vos",
                            PhoneNumber = "+31 777777777",
                            Type = 0
                        },
                        new
                        {
                            EmployeeID = "19f7d479-542a-408b-9016-0561e3e70f65",
                            Birthdate = new DateTime(1, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2001, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Martijs@Martijs.Martijs",
                            FirstName = "Martijs",
                            LastName = "Martijs",
                            PhoneNumber = "Martijs",
                            Type = 0
                        },
                        new
                        {
                            EmployeeID = "44128c29-b648-431e-89f4-7a105f79b00c",
                            Birthdate = new DateTime(1975, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2009, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Heinz@vonschmichtelstein.de",
                            FirstName = "Heinz",
                            LastName = "Schmichtelstein",
                            MiddleName = "von",
                            PhoneNumber = "+49 420 69 7777",
                            Type = 1
                        },
                        new
                        {
                            EmployeeID = "5782d108-8865-40f8-b3b7-ced82309983f",
                            Birthdate = new DateTime(2007, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2009, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Bliksem@martijnshamster.nl",
                            FirstName = "Bliksem",
                            LastName = "Snel",
                            PhoneNumber = "+31 snel",
                            Type = 1
                        },
                        new
                        {
                            EmployeeID = "5989a56b-4d00-4213-9b73-34f80701836b",
                            Birthdate = new DateTime(2005, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2009, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Lobbus@kjell.nl",
                            FirstName = "Lobbus",
                            LastName = "Good boy",
                            PhoneNumber = "+31 1684867685",
                            Type = 1
                        },
                        new
                        {
                            EmployeeID = "5fd33111-a002-4ef1-a301-8c4e4e31e20b",
                            Birthdate = new DateTime(1988, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2020, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Paula@campina.nl",
                            FirstName = "Paula",
                            LastName = "Campina",
                            PhoneNumber = "+31 612345678",
                            Type = 0
                        },
                        new
                        {
                            EmployeeID = "a20cddd4-9704-439f-94bc-95f4659ce543",
                            Birthdate = new DateTime(1957, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2019, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Henkie@Wauwzerz.nl",
                            FirstName = "Henkie",
                            LastName = "T",
                            PhoneNumber = "ten minste vijf",
                            Type = 1
                        },
                        new
                        {
                            EmployeeID = "a357223e-5d1e-461e-b1ad-3a8592f548dd",
                            Birthdate = new DateTime(1999, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2014, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Katriene@smedensberg.com",
                            FirstName = "Katriene",
                            LastName = "Smedensberg",
                            PhoneNumber = "+31 99999999",
                            Type = 0
                        },
                        new
                        {
                            EmployeeID = "b93d704f-a4ae-413f-a587-0b597bbe6a9f",
                            Birthdate = new DateTime(1900, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2002, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Henk@henk.nl",
                            FirstName = "Henk",
                            LastName = "Henk",
                            PhoneNumber = "+31 6666666666",
                            Type = 1
                        },
                        new
                        {
                            EmployeeID = "bdece4e2-3ed9-4008-8878-65884c142394",
                            Birthdate = new DateTime(1869, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2002, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Henk@maardanstoer.nl",
                            FirstName = "Henk",
                            LastName = "Stoer",
                            MiddleName = "maar dan",
                            PhoneNumber = "+31 123123123",
                            Type = 1
                        });
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Forecast", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("AmountExpectedColis")
                        .HasColumnType("int");

                    b.Property<int>("AmountExpectedCustomers")
                        .HasColumnType("int");

                    b.Property<int>("AmountExpectedEmployees")
                        .HasColumnType("int");

                    b.Property<int>("AmountExpectedHours")
                        .HasColumnType("int");

                    b.Property<int?>("StandardsId")
                        .HasColumnType("int");

                    b.HasKey("Date", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("StandardsId");

                    b.ToTable("Forecast");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Presence", b =>
                {
                    b.Property<int>("PresenceId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AlteredClockInDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AlteredClockOutDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ClockInDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ClockOutDateTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSick")
                        .HasColumnType("bit");

                    b.HasKey("PresenceId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Presence");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Shift", b =>
                {
                    b.Property<int>("ShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShiftId"), 1L, 1);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ShiftEndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShiftStartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ShiftId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Shift");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Standards", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1048)
                        .HasColumnType("nvarchar(1048)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Standards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = 0,
                            Description = "aantal minuten per Coli uitladen.",
                            Subject = "Coli",
                            Value = 5
                        },
                        new
                        {
                            Id = 2,
                            Country = 0,
                            Description = "aantal minuten Vakken vullen per Coli.",
                            Subject = "StockingShelves",
                            Value = 30
                        },
                        new
                        {
                            Id = 3,
                            Country = 0,
                            Description = "1 Kassière aantal klanten per uur.",
                            Subject = "Cashier",
                            Value = 30
                        },
                        new
                        {
                            Id = 4,
                            Country = 0,
                            Description = "1 medewerker per aantal klanten per uur.",
                            Subject = "Employee",
                            Value = 100
                        },
                        new
                        {
                            Id = 5,
                            Country = 0,
                            Description = "aantal seconde per meter.",
                            Subject = "Mirror",
                            Value = 30
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5bd43dc-8d4c-48fa-9f72-0be0120f775d",
                            Email = "j.vangeest@bumbodium.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "J.VANGEEST@BUMBODIUM.NL",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAENSkzY5qFUtMPNwDNZGXuIIu8IKQhek9RTiXhPjUhOZW9IcIbNC6Or6dzTcS60Gzpg==",
                            PhoneNumber = "+31 6 56927484",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9b8dd572-7de0-4fe0-bfc3-79d3eaeff9b1",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "19f7d479-542a-408b-9016-0561e3e70f65",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2bf78360-10c2-4325-a2e8-75ca13809572",
                            Email = "Martijs@Martijs.Martijs",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "MARTIJS@MARTIJS.MARTIJS",
                            PasswordHash = "AQAAAAEAACcQAAAAEBJzp/AXUThPOA/7lVi/6NLHw+wcUahxjDVGEtVnHvplvlwM19za0neXj/rsSYQCzA==",
                            PhoneNumber = "Martijs",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a6e59a2a-f15d-4dd8-8248-1b21c15473a1",
                            TwoFactorEnabled = false,
                            UserName = "Martijs@Martijs.Martijs"
                        },
                        new
                        {
                            Id = "2e835447-b339-4a55-9a74-c0d8449bca5c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4227e80c-a8a8-4723-a7c9-08cb46424b27",
                            Email = "Johnny@vos.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "JOHNNY@VOS.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEOsHznbwZGnRorMj0JdUBQv1E30PIcB29bVX/oPioD1EMzF4kcVl5GmkRsJkWIsxlQ==",
                            PhoneNumber = "+31 5",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a6de483c-0838-4d21-9aef-ae20be6b66b0",
                            TwoFactorEnabled = false,
                            UserName = "Johnny@vos.nl"
                        },
                        new
                        {
                            Id = "44128c29-b648-431e-89f4-7a105f79b00c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "89cad56e-6869-4016-825c-2f0cdcef9b7e",
                            Email = "Heinz@vonschmichtelstein.de",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "HEINZ@VONSCHMICHTELSTEIN.DE",
                            PasswordHash = "AQAAAAEAACcQAAAAEM59v/JdDaWhNnddl8oxzdP3nTdcycxtQFdyiyHorcmGDYwIxHq1Kfr2B3S03EbopQ==",
                            PhoneNumber = "+49 420 69 7777",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5e7d1c75-1f25-486d-afe0-42b84f17c37d",
                            TwoFactorEnabled = false,
                            UserName = "Heinz@vonschmichtelstein.de"
                        },
                        new
                        {
                            Id = "5782d108-8865-40f8-b3b7-ced82309983f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "812b5119-a2de-498d-aa0f-3e93f7b572ca",
                            Email = "Bliksem@martijnshamster.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "BLIKSEM@MARTIJNSHAMSTER.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAECMbZUs/khC4IC7Xh0VplOPsY9iatUn3DS9NBdpHw7MZ4r6DzjC1bsC6m22qPT4sxA==",
                            PhoneNumber = "+31 snel",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b543755-4437-47b5-bee7-d08208988fa5",
                            TwoFactorEnabled = false,
                            UserName = "Bliksem@martijnshamster.nl"
                        },
                        new
                        {
                            Id = "5989a56b-4d00-4213-9b73-34f80701836b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "529d8d73-5397-467a-890e-0ba1cf7767fd",
                            Email = "Lobbus@kjell.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "LOBBUS@KJELL.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEDZFGZWpwlDzY7dq4OXF2OJs7kULQk2ZeTInH6xvlUFyIULH2FYjyXt6xXp2XCDveQ==",
                            PhoneNumber = "+31 6 67215943",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "14f2efc4-7b44-43a2-972b-a260932bca0e",
                            TwoFactorEnabled = false,
                            UserName = "Lobbus@kjell.nl"
                        },
                        new
                        {
                            Id = "5fd33111-a002-4ef1-a301-8c4e4e31e20b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7f944f4-8e0e-4a69-9890-30aa75d87608",
                            Email = "Paula@campina.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "PAULA@CAMPINA.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEAxa/ECnPFwMaxpbM01sJFeEZO6pIalYHeJVa+bnKXTBXNvX6i4prEMZ4yDvdeTwdw==",
                            PhoneNumber = "+31 612345678",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5249fe8-6176-4b4a-9416-9adb5c4c0828",
                            TwoFactorEnabled = false,
                            UserName = "Paula@campina.nl"
                        },
                        new
                        {
                            Id = "a20cddd4-9704-439f-94bc-95f4659ce543",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf77c204-d61c-42ab-91dc-87a2f204aa3d",
                            Email = "Henkie@Wauwzerz.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "HENKIE@WAUWZERZ.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEKDrXrSZTLRnuX6GzwE+7gJACrsqA5Mk2e+vOisOZxkUUOyIO/dtnQ2ZJ5qF4aAcrQ==",
                            PhoneNumber = "ten minste vijf",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "285e941c-c946-4ff1-9e0e-7b0e084d3d2b",
                            TwoFactorEnabled = false,
                            UserName = "Henkie@Wauwzerz.nl"
                        },
                        new
                        {
                            Id = "a357223e-5d1e-461e-b1ad-3a8592f548dd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d2065827-f14a-46a6-91e2-36494b52766e",
                            Email = "Katriene@smedensberg.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "KATRIENE@SMEDENSBERG.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC2MozTwS+pLd97FZvxFaitmxUYT/wBVfdxMrvMuzOZIn1cDHSW/r923Qf26m/v0FA==",
                            PhoneNumber = "+31 99999999",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bd919bd4-af57-46cb-b2d7-661864985dc7",
                            TwoFactorEnabled = false,
                            UserName = "Katriene@smedensberg.com"
                        },
                        new
                        {
                            Id = "b93d704f-a4ae-413f-a587-0b597bbe6a9f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e761957c-3cb0-475b-abd6-a711286766c2",
                            Email = "Henk@henk.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "HENK@HENK.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEICi8xIq9ffLeO3X1IgCaRQhFDsfHZt/iN+3QNXMBo6oZlJGArM3z8CRdoiMAdIcLQ==",
                            PhoneNumber = "+31 6666666666",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3f5e5db9-6d20-481b-a307-ec6d85e84e18",
                            TwoFactorEnabled = false,
                            UserName = "Henk@henk.nl"
                        },
                        new
                        {
                            Id = "bdece4e2-3ed9-4008-8878-65884c142394",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee988581-5689-4d33-9534-3c940d61b6a9",
                            Email = "Henk@maardanstoer.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "HENK@MAARDANSTOER.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEA0lFA3IogyxCcm+ldWaUMVqdRUYz2MwDLUlJcszYo0NEDnx/H223+Es3Unann9qKQ==",
                            PhoneNumber = "+31 123123123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6fe1bc87-4ab4-4ddb-bf81-4fa6f4e18dde",
                            TwoFactorEnabled = false,
                            UserName = "Henk@maardanstoer.nl"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Availability", b =>
                {
                    b.HasOne("Bumbodium.Data.DBModels.Employee", "Employee")
                        .WithMany("Availability")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.BranchEmployee", b =>
                {
                    b.HasOne("Bumbodium.Data.DBModels.Employee", "Employee")
                        .WithMany("PartOFFiliaal")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bumbodium.Data.DBModels.Branch", "Filiaal")
                        .WithMany("PartOFEmployee")
                        .HasForeignKey("FiliaalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Filiaal");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Department", b =>
                {
                    b.HasOne("Bumbodium.Data.DBModels.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.DepartmentEmployee", b =>
                {
                    b.HasOne("Bumbodium.Data.DBModels.Department", "Department")
                        .WithMany("PartOFEmployee")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bumbodium.Data.DBModels.Employee", "Employee")
                        .WithMany("PartOFDepartment")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Employee", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Account")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Forecast", b =>
                {
                    b.HasOne("Bumbodium.Data.DBModels.Department", "Department")
                        .WithMany("Forecast")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bumbodium.Data.DBModels.Standards", null)
                        .WithMany("ForecastId")
                        .HasForeignKey("StandardsId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Presence", b =>
                {
                    b.HasOne("Bumbodium.Data.DBModels.Employee", "Employee")
                        .WithMany("Presence")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Shift", b =>
                {
                    b.HasOne("Bumbodium.Data.DBModels.Department", "Department")
                        .WithMany("Shifts")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bumbodium.Data.DBModels.Employee", "Employee")
                        .WithMany("Shifts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Branch", b =>
                {
                    b.Navigation("PartOFEmployee");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Department", b =>
                {
                    b.Navigation("Forecast");

                    b.Navigation("PartOFEmployee");

                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Employee", b =>
                {
                    b.Navigation("Availability");

                    b.Navigation("PartOFDepartment");

                    b.Navigation("PartOFFiliaal");

                    b.Navigation("Presence");

                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Standards", b =>
                {
                    b.Navigation("ForecastId");
                });
#pragma warning restore 612, 618
        }
    }
}
