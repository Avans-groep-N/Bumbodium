// <auto-generated />
using System;
using Bumbodium.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bumbodium.Data.Migrations
{
    [DbContext(typeof(BumbodiumContext))]
    partial class BumbodiumContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Bumbodium.Data.DBModels.Availability", b =>
                {
                    b.Property<int>("AvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AvailabilityId"), 1L, 1);

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("AvailabilityId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Availability");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Branch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Den Bosch",
                            Country = 0,
                            HouseNumber = "1",
                            PostalCode = "0000 AA",
                            Street = "01"
                        });
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.BranchEmployee", b =>
                {
                    b.Property<int>("FiliaalId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FiliaalId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("BranchEmployee");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<int>("SurfaceAreaInM2")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 1,
                            Description = "Vegetables_Fruit",
                            Name = 0,
                            SurfaceAreaInM2 = 50
                        },
                        new
                        {
                            Id = 2,
                            BranchId = 1,
                            Description = "Meat",
                            Name = 1,
                            SurfaceAreaInM2 = 140
                        },
                        new
                        {
                            Id = 3,
                            BranchId = 1,
                            Description = "Fish",
                            Name = 2,
                            SurfaceAreaInM2 = 80
                        },
                        new
                        {
                            Id = 4,
                            BranchId = 1,
                            Description = "Cheese_Milk",
                            Name = 3,
                            SurfaceAreaInM2 = 200
                        },
                        new
                        {
                            Id = 5,
                            BranchId = 1,
                            Description = "Bread",
                            Name = 4,
                            SurfaceAreaInM2 = 150
                        },
                        new
                        {
                            Id = 6,
                            BranchId = 1,
                            Description = "Cosmetics",
                            Name = 5,
                            SurfaceAreaInM2 = 180
                        },
                        new
                        {
                            Id = 7,
                            BranchId = 1,
                            Description = "Checkout",
                            Name = 6,
                            SurfaceAreaInM2 = 90
                        },
                        new
                        {
                            Id = 8,
                            BranchId = 1,
                            Description = "Stockroom",
                            Name = 7,
                            SurfaceAreaInM2 = 100
                        },
                        new
                        {
                            Id = 9,
                            BranchId = 1,
                            Description = "InformationDesk",
                            Name = 8,
                            SurfaceAreaInM2 = 70
                        });
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.DepartmentEmployee", b =>
                {
                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WorkFunction")
                        .HasColumnType("int");

                    b.HasKey("DepartmentId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("DepartmentEmployee");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "19f7d479-542a-408b-9016-0561e3e70f65",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 2,
                            EmployeeId = "19f7d479-542a-408b-9016-0561e3e70f65",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 3,
                            EmployeeId = "19f7d479-542a-408b-9016-0561e3e70f65",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 4,
                            EmployeeId = "19f7d479-542a-408b-9016-0561e3e70f65",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 5,
                            EmployeeId = "19f7d479-542a-408b-9016-0561e3e70f65",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 6,
                            EmployeeId = "19f7d479-542a-408b-9016-0561e3e70f65",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 7,
                            EmployeeId = "19f7d479-542a-408b-9016-0561e3e70f65",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 8,
                            EmployeeId = "19f7d479-542a-408b-9016-0561e3e70f65",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 9,
                            EmployeeId = "19f7d479-542a-408b-9016-0561e3e70f65",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "2e835447-b339-4a55-9a74-c0d8449bca5c",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 2,
                            EmployeeId = "2e835447-b339-4a55-9a74-c0d8449bca5c",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 3,
                            EmployeeId = "2e835447-b339-4a55-9a74-c0d8449bca5c",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 7,
                            EmployeeId = "44128c29-b648-431e-89f4-7a105f79b00c",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 8,
                            EmployeeId = "44128c29-b648-431e-89f4-7a105f79b00c",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 9,
                            EmployeeId = "44128c29-b648-431e-89f4-7a105f79b00c",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "5782d108-8865-40f8-b3b7-ced82309983f",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 2,
                            EmployeeId = "5782d108-8865-40f8-b3b7-ced82309983f",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 3,
                            EmployeeId = "5782d108-8865-40f8-b3b7-ced82309983f",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 4,
                            EmployeeId = "5782d108-8865-40f8-b3b7-ced82309983f",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 5,
                            EmployeeId = "5782d108-8865-40f8-b3b7-ced82309983f",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 6,
                            EmployeeId = "5782d108-8865-40f8-b3b7-ced82309983f",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 7,
                            EmployeeId = "5782d108-8865-40f8-b3b7-ced82309983f",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 8,
                            EmployeeId = "5782d108-8865-40f8-b3b7-ced82309983f",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 9,
                            EmployeeId = "5782d108-8865-40f8-b3b7-ced82309983f",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "5989a56b-4d00-4213-9b73-34f80701836b",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 2,
                            EmployeeId = "5989a56b-4d00-4213-9b73-34f80701836b",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 3,
                            EmployeeId = "5989a56b-4d00-4213-9b73-34f80701836b",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 4,
                            EmployeeId = "5989a56b-4d00-4213-9b73-34f80701836b",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 5,
                            EmployeeId = "5989a56b-4d00-4213-9b73-34f80701836b",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "5fd33111-a002-4ef1-a301-8c4e4e31e20b",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 2,
                            EmployeeId = "5fd33111-a002-4ef1-a301-8c4e4e31e20b",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 3,
                            EmployeeId = "5fd33111-a002-4ef1-a301-8c4e4e31e20b",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 4,
                            EmployeeId = "5fd33111-a002-4ef1-a301-8c4e4e31e20b",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 5,
                            EmployeeId = "5fd33111-a002-4ef1-a301-8c4e4e31e20b",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "a20cddd4-9704-439f-94bc-95f4659ce543",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "a357223e-5d1e-461e-b1ad-3a8592f548dd",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "b74ddd14-6340-4840-95c2-db12554843e5",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "b93d704f-a4ae-413f-a587-0b597bbe6a9f",
                            WorkFunction = 0
                        },
                        new
                        {
                            DepartmentId = 1,
                            EmployeeId = "bdece4e2-3ed9-4008-8878-65884c142394",
                            WorkFunction = 0
                        });
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Employee", b =>
                {
                    b.Property<string>("EmployeeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateInService")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOutService")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("EmployeeID");

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            EmployeeID = "b74ddd14-6340-4840-95c2-db12554843e5",
                            Birthdate = new DateTime(1989, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2006, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "j.vangeest@bumbodium.nl",
                            FirstName = "Jan",
                            LastName = "Geest",
                            MiddleName = "van",
                            PhoneNumber = "+31 6 56927484",
                            Type = 0
                        },
                        new
                        {
                            EmployeeID = "2e835447-b339-4a55-9a74-c0d8449bca5c",
                            Birthdate = new DateTime(1, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2001, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Johnny@vos.nl",
                            FirstName = "Johnny",
                            LastName = "Vos",
                            PhoneNumber = "+31 777777777",
                            Type = 0
                        },
                        new
                        {
                            EmployeeID = "19f7d479-542a-408b-9016-0561e3e70f65",
                            Birthdate = new DateTime(1, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2001, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Martijs@Martijs.Martijs",
                            FirstName = "Martijs",
                            LastName = "Martijs",
                            PhoneNumber = "Martijs",
                            Type = 0
                        },
                        new
                        {
                            EmployeeID = "44128c29-b648-431e-89f4-7a105f79b00c",
                            Birthdate = new DateTime(1975, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2009, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Heinz@vonschmichtelstein.de",
                            FirstName = "Heinz",
                            LastName = "Schmichtelstein",
                            MiddleName = "von",
                            PhoneNumber = "+49 420 69 7777",
                            Type = 1
                        },
                        new
                        {
                            EmployeeID = "5782d108-8865-40f8-b3b7-ced82309983f",
                            Birthdate = new DateTime(2021, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2022, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Bliksem@martijnshamster.nl",
                            FirstName = "Bliksem",
                            LastName = "Snel",
                            PhoneNumber = "+31 snel",
                            Type = 1
                        },
                        new
                        {
                            EmployeeID = "5989a56b-4d00-4213-9b73-34f80701836b",
                            Birthdate = new DateTime(2018, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2022, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Lobbus@kjell.nl",
                            FirstName = "Lobbus",
                            LastName = "Good boy",
                            PhoneNumber = "+31 1684867685",
                            Type = 1
                        },
                        new
                        {
                            EmployeeID = "5fd33111-a002-4ef1-a301-8c4e4e31e20b",
                            Birthdate = new DateTime(1988, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2020, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Paula@campina.nl",
                            FirstName = "Paula",
                            LastName = "Campina",
                            PhoneNumber = "+31 612345678",
                            Type = 0
                        },
                        new
                        {
                            EmployeeID = "a20cddd4-9704-439f-94bc-95f4659ce543",
                            Birthdate = new DateTime(1957, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2019, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Henkie@Wauwzerz.nl",
                            FirstName = "Henkie",
                            LastName = "T",
                            PhoneNumber = "ten minste vijf",
                            Type = 1
                        },
                        new
                        {
                            EmployeeID = "a357223e-5d1e-461e-b1ad-3a8592f548dd",
                            Birthdate = new DateTime(1999, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2014, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Katriene@smedensberg.com",
                            FirstName = "Katriene",
                            LastName = "Smedensberg",
                            PhoneNumber = "+31 99999999",
                            Type = 0
                        },
                        new
                        {
                            EmployeeID = "b93d704f-a4ae-413f-a587-0b597bbe6a9f",
                            Birthdate = new DateTime(1900, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2002, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Henk@henk.nl",
                            FirstName = "Henk",
                            LastName = "Henk",
                            PhoneNumber = "+31 6666666666",
                            Type = 1
                        },
                        new
                        {
                            EmployeeID = "bdece4e2-3ed9-4008-8878-65884c142394",
                            Birthdate = new DateTime(1869, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateInService = new DateTime(2002, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Henk@maardanstoer.nl",
                            FirstName = "Henk",
                            LastName = "Stoer",
                            MiddleName = "maar dan",
                            PhoneNumber = "+31 123123123",
                            Type = 1
                        });
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Forecast", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("AmountExpectedColis")
                        .HasColumnType("int");

                    b.Property<int>("AmountExpectedCustomers")
                        .HasColumnType("int");

                    b.Property<int>("AmountExpectedEmployees")
                        .HasColumnType("int");

                    b.Property<int>("AmountExpectedHours")
                        .HasColumnType("int");

                    b.Property<int?>("StandardsId")
                        .HasColumnType("int");

                    b.HasKey("Date", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("StandardsId");

                    b.ToTable("Forecast");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Presence", b =>
                {
                    b.Property<int>("PresenceId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AlteredClockInDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AlteredClockOutDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ClockInDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ClockOutDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("PresenceId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Presence");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Shift", b =>
                {
                    b.Property<int>("ShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShiftId"), 1L, 1);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ShiftEndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShiftStartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ShiftId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Shift");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Standards", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1048)
                        .HasColumnType("nvarchar(1048)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Standards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = 0,
                            Description = "aantal minuten per Coli uitladen.",
                            Subject = "Coli",
                            Value = 5
                        },
                        new
                        {
                            Id = 2,
                            Country = 0,
                            Description = "aantal minuten Vakken vullen per Coli.",
                            Subject = "StockingShelves",
                            Value = 30
                        },
                        new
                        {
                            Id = 3,
                            Country = 0,
                            Description = "1 Kasiere per uur per aantal klanten.",
                            Subject = "Cashier",
                            Value = 30
                        },
                        new
                        {
                            Id = 4,
                            Country = 0,
                            Description = "1 medewerker per customer per uur per aantal klanten.",
                            Subject = "Employee",
                            Value = 100
                        },
                        new
                        {
                            Id = 5,
                            Country = 0,
                            Description = "aantal seconde voor medewerker per customer per meter.",
                            Subject = "Mirror",
                            Value = 30
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0e514c93-fcf5-4718-ae1e-286f837760bc",
                            Email = "j.vangeest@bumbodium.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "+31 6 56927484",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5742724d-2a86-462c-8aba-711c1841e004",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "19f7d479-542a-408b-9016-0561e3e70f65",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7235cae4-ab29-4edc-a35c-f824c175acca",
                            Email = "Martijs@Martijs.Martijs",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "Martijs",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ef981add-c510-4a1d-855e-8ace99e89f2b",
                            TwoFactorEnabled = false,
                            UserName = "Martijs@Martijs.Martijs"
                        },
                        new
                        {
                            Id = "2e835447-b339-4a55-9a74-c0d8449bca5c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca7211e4-6ca1-4483-a861-4b865d8f28ad",
                            Email = "Johnny@vos.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "+31 5",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c1e390c-f2e8-422d-936b-c328493fb8f5",
                            TwoFactorEnabled = false,
                            UserName = "Johnny@vos.nl"
                        },
                        new
                        {
                            Id = "44128c29-b648-431e-89f4-7a105f79b00c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb190224-e87e-402b-ad14-69015450ffaf",
                            Email = "Heinz@vonschmichtelstein.de",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "+49 420 69 7777",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c4000c8c-3cc6-4d04-bfd2-2fc83387dc85",
                            TwoFactorEnabled = false,
                            UserName = "Heinz@vonschmichtelstein.de"
                        },
                        new
                        {
                            Id = "5782d108-8865-40f8-b3b7-ced82309983f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b5ffdc2-0066-403c-b14d-ebddc60343fb",
                            Email = "Bliksem@martijnshamster.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "+31 snel",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "63c002bf-1e0f-4345-9c1e-6d319d43c227",
                            TwoFactorEnabled = false,
                            UserName = "Bliksem@martijnshamster.nl"
                        },
                        new
                        {
                            Id = "5989a56b-4d00-4213-9b73-34f80701836b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1b55940-516c-4382-a80f-67b59386dbac",
                            Email = "Lobbus@kjell.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "+31 6 67215943",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "badce163-0e4f-49c9-9332-618db9c9b6dd",
                            TwoFactorEnabled = false,
                            UserName = "Lobbus@kjell.nl"
                        },
                        new
                        {
                            Id = "5fd33111-a002-4ef1-a301-8c4e4e31e20b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "023929df-2b63-4a6e-ae25-4dfda488a18d",
                            Email = "Paula@campina.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "+31 612345678",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "95688368-9b7e-4aa9-ae39-36164aeea5dc",
                            TwoFactorEnabled = false,
                            UserName = "Paula@campina.nl"
                        },
                        new
                        {
                            Id = "a20cddd4-9704-439f-94bc-95f4659ce543",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1a04103-90dc-44b7-a645-0ef85d4736c2",
                            Email = "Henkie@Wauwzerz.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "ten minste vijf",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0920d0a3-9aad-4c44-a472-f001c9e36891",
                            TwoFactorEnabled = false,
                            UserName = "Henkie@Wauwzerz.nl"
                        },
                        new
                        {
                            Id = "a357223e-5d1e-461e-b1ad-3a8592f548dd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57c3a952-2ebb-40fb-9954-a11f5919314d",
                            Email = "Katriene@smedensberg.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "+31 99999999",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6096c604-1636-4cc0-9724-aee1619aa3dd",
                            TwoFactorEnabled = false,
                            UserName = "Katriene@smedensberg.com"
                        },
                        new
                        {
                            Id = "b93d704f-a4ae-413f-a587-0b597bbe6a9f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f84e4c29-0804-4d5f-82f4-c18cd452e3f6",
                            Email = "Henk@henk.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "+31 6666666666",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b19e47fd-767c-4b17-b0bc-2f89af462086",
                            TwoFactorEnabled = false,
                            UserName = "Henk@henk.nl"
                        },
                        new
                        {
                            Id = "bdece4e2-3ed9-4008-8878-65884c142394",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "084ebbf7-8066-4e92-bed1-d51e962e7e6b",
                            Email = "Henk@maardanstoer.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "+31 123123123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a9495e2d-aa4b-4f48-a25f-1f8772ed7cc3",
                            TwoFactorEnabled = false,
                            UserName = "Henk@maardanstoer.nl"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Availability", b =>
                {
                    b.HasOne("Bumbodium.Data.DBModels.Employee", "Employee")
                        .WithMany("Availability")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.BranchEmployee", b =>
                {
                    b.HasOne("Bumbodium.Data.DBModels.Employee", "Employee")
                        .WithMany("PartOFFiliaal")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bumbodium.Data.DBModels.Branch", "Filiaal")
                        .WithMany("PartOFEmployee")
                        .HasForeignKey("FiliaalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Filiaal");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Department", b =>
                {
                    b.HasOne("Bumbodium.Data.DBModels.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.DepartmentEmployee", b =>
                {
                    b.HasOne("Bumbodium.Data.DBModels.Department", "Department")
                        .WithMany("PartOFEmployee")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bumbodium.Data.DBModels.Employee", "Employee")
                        .WithMany("PartOFDepartment")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Employee", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Account")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Forecast", b =>
                {
                    b.HasOne("Bumbodium.Data.DBModels.Department", "Department")
                        .WithMany("Forecast")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bumbodium.Data.DBModels.Standards", null)
                        .WithMany("ForecastId")
                        .HasForeignKey("StandardsId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Presence", b =>
                {
                    b.HasOne("Bumbodium.Data.DBModels.Employee", "Employee")
                        .WithMany("Presence")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Shift", b =>
                {
                    b.HasOne("Bumbodium.Data.DBModels.Department", "Department")
                        .WithMany("Shifts")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bumbodium.Data.DBModels.Employee", "Employee")
                        .WithMany("Shifts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Branch", b =>
                {
                    b.Navigation("PartOFEmployee");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Department", b =>
                {
                    b.Navigation("Forecast");

                    b.Navigation("PartOFEmployee");

                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Employee", b =>
                {
                    b.Navigation("Availability");

                    b.Navigation("PartOFDepartment");

                    b.Navigation("PartOFFiliaal");

                    b.Navigation("Presence");

                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("Bumbodium.Data.DBModels.Standards", b =>
                {
                    b.Navigation("ForecastId");
                });
#pragma warning restore 612, 618
        }
    }
}
